import sharp from "sharp";
import { glob } from "glob";
import fsPromise from "node:fs/promises";
import fs from "node:fs";
import { execSync } from "node:child_process";

const sizes = [
  { width: 160, height: 160 },
  { width: 320, height: 320 },
];

async function deletePNGFiles() {
  const files = await glob("**/*_*x*.png"); // This pattern matches PNGs that were likely generated by the conversion function

  await Promise.all(
    files.map(async (file) => {
      await fsPromise.unlink(file);
      console.log("Deleted:", file);
    })
  );
}

async function convertSVGToPNGForFile(file: string) {
  return (
    await Promise.all(
      sizes.map(async (size) => {
        const outputPath = file.replace(
          ".svg",
          `_${size.width}x${size.height}.png`
        );

        if (fs.existsSync(outputPath)) {
          console.log("Skipped conversion for existing file:", outputPath);

          return null;
        }

        try {
          await sharp(file)
            .resize({ width: size.width, height: size.height, fit: "inside" })
            .toFile(outputPath);

          console.log("Converted:", file, "to", outputPath);

          return outputPath;
        } catch (error) {
          console.error("Error converting:", file, error);

          throw error;
        }
      })
    )
  ).filter((val): val is string => !!val);
}

async function convertSVGToPNG() {
  const files = await glob("**/*.svg");

  const res = (await Promise.all(files.map(convertSVGToPNGForFile))).flat();

  execSync(`git add ${res.join(" ")}`);
}

if (process.argv[2] === "delete") {
  deletePNGFiles();
} else if (process.argv[2] === "convert") {
  convertSVGToPNG();
} else {
  console.log("Please provide a valid command: delete or convert");
}
